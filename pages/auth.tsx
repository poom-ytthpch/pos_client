import * as React from "react";
import { NextPage } from "next";
import Default from "./component/Default";
import { Box, Button } from "@mui/material";
import MyTextField from "./component/materials/MyTextField";
import { FormControl } from "@mui/material";
import { LoadingButton } from "@mui/lab";
import MyLoadingButton from "./component/materials/MyLoadingButton";
import LoginIcon from "@mui/icons-material/Login";
import { client } from "../common/apollo-client";
import { gql } from "@apollo/client";
import { useDispatch } from "react-redux";
import { signIn } from "../store/slices/auth";
import { signOut } from "../store";
import parseJwt from "../common/jwt-parse";
import Head from "next/head";
import { useRouter } from "next/router";

const Auth: NextPage = (): React.ReactElement => {
  const dispatch = useDispatch();
  const router = useRouter();
  const [email, setEmail] = React.useState("");
  const [password, setPassword] = React.useState("");
  const [signInLoading, setSignInLoading] = React.useState(false);

  const handleSetEmail = async (e: React.ChangeEvent<HTMLInputElement>) => {
    await setEmail(e.target.value);
  };

  const handleSetPassword = async (e: React.ChangeEvent<HTMLInputElement>) => {
    await setPassword(e.target.value);
  };

  const handleLogin = async () => {
    await setSignInLoading(true);
    try {
      // const { data } = await client.mutate({
      //   mutation: gql`
      //     mutation Mutation($signInInput: SignInInput!) {
      //       signIn(signInInput: $signInInput) {
      //         id
      //         email
      //         name
      //         refreshToken
      //         token
      //       }
      //     }
      //   `,
      //   variables: {
      //     signInInput: {
      //       email: email,
      //       password: password,
      //     },
      //   },
      // });
      const data = {
        signIn: {
          id: 1,
          email: "admin@admin.com",
          name: "admin",
          password:
            "$2b$10$Ot6dEm77ROJRzl45py1QiOGaEkxszubIqXL1Qdjkkz58WUbAcJ2MO",
          token:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwic3ViIjoxLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2NjgxNTM4MDEsImV4cCI6MTY2ODE1NzQwMX0.9QTN4fnRmuJrTw57hPGk0hBl1m_gYl4SAClcOZVGZlM",
          refreshToken:
            "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwic3ViIjoxLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2NjgxNTM4MDEsImV4cCI6MTY2ODE1Mzg2MX0.xvloWL25TQ1g4hDb-J7oMoVHumI75S7yVQRzZzAma0k",
          role: {
            id: 1,
            type: "admin",
          },
        },
      };
      console.log({ data });
      const decodedJwt = await parseJwt(data.signIn.token);
      await dispatch(signIn({ user: data.signIn, role: decodedJwt.role }));
      await setSignInLoading(false);
      await router.push("/");
    } catch (error) {
      console.log({ error });
      await setSignInLoading(false);
    }
  };

  return (
    <Box className="bg-dot">
      <Head>
        <title>auth</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box className="centered">
        <Box className="auth-box">
          <Box className="auth-box-image"></Box>
          <Box className="auth-box-form">
            <FormControl variant="outlined" className="auth-box-form-control">
              <Box className="auth-box-form-header">
                <p className="text-color text-3xl font-bold">MEAW POS</p>
              </Box>
              <MyTextField
                id="email"
                label="Email"
                variant="standard"
                onChange={handleSetEmail}
              />
              <MyTextField
                id="password"
                label="Password"
                type="password"
                variant="standard"
                onChange={handleSetPassword}
              />
              <MyLoadingButton
                size="large"
                variant="outlined"
                loading={signInLoading}
                onClick={() => {
                  handleLogin();
                }}
                startIcon={<LoginIcon />}
              >
                SignIn
              </MyLoadingButton>
              <Button
                onClick={() => {
                  dispatch(signOut());
                }}
              >
                SignOut
              </Button>
            </FormControl>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Auth;
